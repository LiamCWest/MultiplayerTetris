# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tetris_pb2 as tetris__pb2


class TetrisServiceStub(object):
    """Define the TetrisService service, which provides methods for connecting to the game server, disconnecting from the game server, creating a new game, joining an existing game, and moving the current piece.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/api.TetrisService/Connect',
                request_serializer=tetris__pb2.ConnectRequest.SerializeToString,
                response_deserializer=tetris__pb2.ConnectResponse.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/api.TetrisService/Disconnect',
                request_serializer=tetris__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=tetris__pb2.DisconnectResponse.FromString,
                )
        self.CreateGame = channel.unary_unary(
                '/api.TetrisService/CreateGame',
                request_serializer=tetris__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=tetris__pb2.CreateGameResponse.FromString,
                )
        self.JoinGame = channel.unary_unary(
                '/api.TetrisService/JoinGame',
                request_serializer=tetris__pb2.JoinGameRequest.SerializeToString,
                response_deserializer=tetris__pb2.JoinGameResponse.FromString,
                )
        self.MovePiece = channel.unary_unary(
                '/api.TetrisService/MovePiece',
                request_serializer=tetris__pb2.MovePieceRequest.SerializeToString,
                response_deserializer=tetris__pb2.MovePieceResponse.FromString,
                )
        self.UpdateGameState = channel.unary_unary(
                '/api.TetrisService/UpdateGameState',
                request_serializer=tetris__pb2.GameState.SerializeToString,
                response_deserializer=tetris__pb2.Empty.FromString,
                )


class TetrisServiceServicer(object):
    """Define the TetrisService service, which provides methods for connecting to the game server, disconnecting from the game server, creating a new game, joining an existing game, and moving the current piece.
    """

    def Connect(self, request, context):
        """Connect to the game server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Disconnect from the game server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGame(self, request, context):
        """Create a new game.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinGame(self, request, context):
        """Join an existing game.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MovePiece(self, request, context):
        """Move the current piece.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGameState(self, request, context):
        """Define the UpdateGameState method, which is used by the server to update the game state and send the updated game state to all players in the game.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TetrisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=tetris__pb2.ConnectRequest.FromString,
                    response_serializer=tetris__pb2.ConnectResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=tetris__pb2.DisconnectRequest.FromString,
                    response_serializer=tetris__pb2.DisconnectResponse.SerializeToString,
            ),
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=tetris__pb2.CreateGameRequest.FromString,
                    response_serializer=tetris__pb2.CreateGameResponse.SerializeToString,
            ),
            'JoinGame': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinGame,
                    request_deserializer=tetris__pb2.JoinGameRequest.FromString,
                    response_serializer=tetris__pb2.JoinGameResponse.SerializeToString,
            ),
            'MovePiece': grpc.unary_unary_rpc_method_handler(
                    servicer.MovePiece,
                    request_deserializer=tetris__pb2.MovePieceRequest.FromString,
                    response_serializer=tetris__pb2.MovePieceResponse.SerializeToString,
            ),
            'UpdateGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGameState,
                    request_deserializer=tetris__pb2.GameState.FromString,
                    response_serializer=tetris__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.TetrisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TetrisService(object):
    """Define the TetrisService service, which provides methods for connecting to the game server, disconnecting from the game server, creating a new game, joining an existing game, and moving the current piece.
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.TetrisService/Connect',
            tetris__pb2.ConnectRequest.SerializeToString,
            tetris__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.TetrisService/Disconnect',
            tetris__pb2.DisconnectRequest.SerializeToString,
            tetris__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.TetrisService/CreateGame',
            tetris__pb2.CreateGameRequest.SerializeToString,
            tetris__pb2.CreateGameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.TetrisService/JoinGame',
            tetris__pb2.JoinGameRequest.SerializeToString,
            tetris__pb2.JoinGameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MovePiece(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.TetrisService/MovePiece',
            tetris__pb2.MovePieceRequest.SerializeToString,
            tetris__pb2.MovePieceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.TetrisService/UpdateGameState',
            tetris__pb2.GameState.SerializeToString,
            tetris__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
